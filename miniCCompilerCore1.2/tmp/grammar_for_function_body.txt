FB -> $
FB -> RS FB
RS -> PR ;
RS -> MT DT VL ;
MT -> auto
MT -> register
MT -> MT1
MT1 -> extern
MT1 -> static
MT1 -> $
DT -> int
DT -> char
DT -> float
DT -> double
VL -> VD VL1
VL1 -> , VD VL1
VL1 -> $
VD -> variableName VD1
VD1 -> = PR
VD1 -> $
RS -> if ( PR ) SB RS1
RS1 -> $
RS1 -> else SB
PS -> while ( PR ) SB
RS -> do SB while ( PR ) ;
RS -> for ( PR , PR , PR ) SB
RS -> break;
RS -> continue ;
RS -> return PR ;
RS -> goto positionName ;
SB -> { SB1 }
SB1 -> $
SB1 -> RS SB1
PR -> eexpr
eexpr -> bexpr eexpr1
eexpr1 -> ao bexpr eexpr1
eexpr1 -> $
ao -> =
ao -> +=
ao -> -=
ao -> *=
ao -> /=
bexpr -> bterm bexpr1
bexpr1 -> || bterm bexpr1
bexpr1 -> $
bterm -> rexpr bterm1
bterm1 -> && rexpr bterm1
bterm1 -> $
rexpr -> rterm rexpr1
rexpr1 -> != rterm rexpr1
rexpr1 -> == rterm rexpr1
rexpr1 -> $
rterm -> aexpr rterm1
rterm1 -> < aexpr rterm1
rterm1 -> <= aexpr rterm1
rterm1 -> > aexpr rterm1
rterm1 -> >= aexpr rterm1
rterm1 -> $
aexpr -> term aexpr1
aexpr1 -> + term aexpr1
aexpr1 -> - term aexpr1
aexpr1 -> $
term -> factor term1
term1 -> * factor term1
term1 -> / factor term1
term1 -> % factor term1
term1 -> $
factor -> ael
factor -> - factor
factor -> ! factor
ael -> root
ael -> ( bexpr )
root -> id
root -> 1234
root -> 01234
root -> 0x1234
root -> 123.4
root -> 123.4E6
root -> 'a'