S -> $
S -> F S
F -> MT1 DT F1
F1 -> functionName ( PL ) F2
F2 -> { FB }
F2 -> ;
DT -> void
DT -> int
DT -> char
DT -> float
VL -> VD VL1
VL1 -> , VD VL1
VL1 -> $
VD -> variableName VD1
VD1 -> = PR
VD1 -> $
PL -> $
PL -> PL1
PL1 -> PD PL2
PL2 -> , PD PL2
PL2 -> $
PD -> DT PD1
PD1 -> parameterName
PD1 -> $
FB -> $
FB -> RS FB
SB -> { SB1 }
SB1 -> $
SB1 -> RS SB1
RS -> PR ;
RS -> MT DT VL ;
RS -> if ( PR ) SB RS1
RS -> while ( PR ) SB
RS -> do SB while ( PR ) ;
RS -> for ( PR , PR , PR ) SB
RS -> break;
RS -> continue ;
RS -> return PR ;
RS -> print ( Print
RS -> scan ( id ) ;
RS1 -> $
RS1 -> else SB
Print -> "String" ) ;
Print -> PR ) ;
MT -> auto
MT -> register
MT -> MT1
MT1 -> extern
MT1 -> static
MT1 -> $
PR -> eexpr
eexpr -> bexpr eexpr1
eexpr1 -> ao bexpr eexpr1
eexpr1 -> $
ao -> =
ao -> +=
ao -> -=
ao -> *=
ao -> /=
bexpr -> bterm bexpr1
bexpr1 -> || bterm bexpr1
bexpr1 -> $
bterm -> rexpr bterm1
bterm1 -> && rexpr bterm1
bterm1 -> $
rexpr -> aexpr rexpr1
rexpr1 -> != aexpr rexpr1
rexpr1 -> == aexpr rexpr1
rexpr1 -> < aexpr rexpr1
rexpr1 -> > aexpr rexpr1
rexpr1 -> <= aexpr rexpr1
rexpr1 -> >= aexpr rexpr1
rexpr1 -> $
aexpr -> term aexpr1
aexpr1 -> + term aexpr1
aexpr1 -> - term aexpr1
aexpr1 -> $
term -> factor term1
term1 -> * factor term1
term1 -> / factor term1
term1 -> % factor term1
term1 -> $
factor -> !ael
factor -> ael
ael -> root
ael -> ( bexpr )
root -> id
root -> 1234
root -> 01234
root -> 0x1234
root -> 123.4
root -> 123.4E6
root -> 'a'
root -> BOOL
BOOL -> true
BOOL -> false